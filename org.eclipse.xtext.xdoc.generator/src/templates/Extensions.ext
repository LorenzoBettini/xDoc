import org::eclipse::xtext::xdoc::xdoc;

lstEscapeToTex():
	"Â";

escapeLatexChars(String s):
	s.replaceAll("\\$", "\\\\\\$").replaceAll("\\{", "\\\\{").replaceAll("\\}", "\\\\}")
		.replaceAll("\\\\(?![{}$])", "\\\\textbackslash{}")
		.replaceAll("#", "\\\\#").replaceAll("%", "\\\\%")
		.replaceAll("_", "\\\\_").replaceAll("\\^", "\\\\textasciicircum{}")
		.replaceAll("&", "\\\\&");

unescapeXdocChars(String s):
	s.replaceAll("\\\\\\[", "[").replaceAll("\\\\\\]", "]");

prepareListingsString(String s):
	s.replaceAll("^\n", "");

escapeHTMLChars(String s):
	s.replaceAll("&", "&amp;").replaceAll("\"", "&quot;").replaceAll("'", "&apos;")
		.replaceAll("<", "&lt;").replaceAll(">", "&gt;");

formatCode(String text, LangDef language):
	highlightKeywords(text.escapeHTMLChars().replaceAll(" ", "&nbsp;").replaceAll("\t", "&nbsp;&nbsp;&nbsp;&nbsp;").replaceAll("\n", "<br />"), language);

// simple heuristic to determine if code is meant to be inline
boolean inline(CodeBlock c):
	c.contents.size == 1 && !c.contents.first().toString().contains("\n");

boolean block(TextOrMarkup c):
	(TextPart.isInstance(c.contents.first())
		&& ((TextPart)c.contents.first()).text.matches("^\\s*$") 
		&& CodeBlock.isInstance(c.contents.get(1)))
	|| (CodeBlock.isInstance(c.contents.first()) && !inline((CodeBlock)c.contents.first()));


// eclipse help helpers
fileName(Document doc, Object o):
	throwUnsupportedOperation("Cannot determine target filename for "+o.toString(), o);

String fileName(Document doc, Chapter c):
	let i = doc.chapters.indexOf(c):
		if(i == -1) then
			doc.chapters.indexOf(doc.chapters.typeSelect(ChapterRef).select(e|e.chapter == c).first()).toString()
		else
			i.toString()
	;

String fileName(Document doc, AbstractSection s):
	fileName(doc, s.eContainer());
/*
String fileName(Document doc, Section2 s):
	fileName(doc, s.eContainer());

String fileName(Document doc, Section3 s):
	fileName(doc, s.eContainer());
*/
fileName(Document doc,Ref r):
	fileName(doc, r.ref);

fileName(Document doc,Item i):
	fileName(doc, i.eContainer());

fileName(Document doc,OrderedList ol):
	fileName(doc, ol.eContainer());

fileName(Document doc,UnorderedList ul):
	fileName(doc, ul.eContainer());

fileName(Document doc,TextOrMarkup tom):
	fileName(doc, tom.eContainer());

//String labelName(Section4 s):
//	fileName((Section3)s.eContainer()) +"-"+ ((Section3)s.eContainer()).subSections.indexOf(s).toString();

String labelName(Document doc, Object o):
	throwUnsupportedOperation("Labelname for " + o + " undefined", o);

labelName(Document doc, Section sec):
	"sec-" + ((Chapter)sec.eContainer()).subSections.indexOf(sec);

labelName(Document doc, Section2 sec):
	labelName(doc, sec.eContainer()) + "-" + ((Section)sec.eContainer()).subSections.indexOf(sec);

labelName(Document doc, Section3 sec):
	labelName(doc, sec.eContainer()) + "-" + ((Section2)sec.eContainer()).subSections.indexOf(sec);

labelName(Document doc, Section4 sec):
	labelName(doc, sec.eContainer()) + "-" + ((Section3)sec.eContainer()).subSections.indexOf(sec);

remWS(String s):
	s.replaceAll("\\s", "");

isFirst(AbstractSection as):
	false;
	
isFirst(Section2 s):
	((Section)s.eContainer()).subSections.first() == s;

isFirst(Section s):
	((Chapter)s.eContainer()).subSections.first() == s;

isFirst(Chapter c):
	((Document)c.eContainer()).chapters.first() == c;

isLast(AbstractSection as):
	false;

isLast(Section2 s):
	((Section)s.eContainer()).subSections.last() == s;

isLast(Section s):
	((Chapter)s.eContainer()).subSections.last() == s;

isLast(Chapter c):
	((Document)c.eContainer()).chapters.last() == c;

sibling(AbstractSection as, Integer i):
	as;

sibling(Chapter c, Integer i):
	let d =((Document)c.eContainer()):
		d.chapters.get(d.chapters.indexOf(c) + i);

sibling(Section s, Integer i):
	let c =((Chapter)s.eContainer()):
		c.subSections.get(c.subSections.indexOf(s) + i);

sibling(Section2 c, Integer i):
	let d =((Section)c.eContainer()):
		d.subSections.get(d.subSections.indexOf(c) + i);

String percentToFloat(String percent):
	JAVA templates.util.StringFormatter.percentToFloat(java.lang.String);

String encode(String s):
	JAVA templates.util.StringFormatter.encode(java.lang.String);

CodeBlock removeIndent(CodeBlock cb):
	JAVA templates.util.StringFormatter.removeIndent(org.eclipse.xtext.xdoc.xdoc.CodeBlock);
	
Void throwUnsupportedOperation(String msg, Object param) :
	JAVA templates.util.Errors.throwUnsupportedOperation(java.lang.String, java.lang.Object);
	
Void storeLink(Link link):
	JAVA templates.util.StringFormatter.storeLink(org.eclipse.xtext.xdoc.xdoc.Link);

Set[String] getStoredLinks():
	JAVA templates.util.StringFormatter.getStoredLinks();

String highlightKeywords(String string, LangDef language):
	JAVA templates.util.StringFormatter.highlightKeywords(java.lang.String, org.eclipse.xtext.xdoc.xdoc.LangDef);
