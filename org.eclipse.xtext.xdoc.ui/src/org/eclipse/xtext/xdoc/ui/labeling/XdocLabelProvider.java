/*
 * generated by Xtext
 */
package org.eclipse.xtext.xdoc.ui.labeling;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.util.PolymorphicDispatcher;
import org.eclipse.xtext.xdoc.xdoc.AbstractSection;
import org.eclipse.xtext.xdoc.xdoc.Chapter;
import org.eclipse.xtext.xdoc.xdoc.Document;
import org.eclipse.xtext.xdoc.xdoc.Section;
import org.eclipse.xtext.xdoc.xdoc.Section2;
import org.eclipse.xtext.xdoc.xdoc.Section3;
import org.eclipse.xtext.xdoc.xdoc.Section4;
import org.eclipse.xtext.xdoc.xdoc.TextOrMarkup;
import org.eclipse.xtext.xdoc.xdoc.TextPart;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class XdocLabelProvider extends DefaultEObjectLabelProvider {

	private PolymorphicDispatcher<String> version = PolymorphicDispatcher
			.createForSingleTarget("version", this);

	@Inject
	public XdocLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	String text(AbstractSection ele) {
		return toString(version.invoke(ele), ele.getTitle());
	}

	protected String version(Document s) {
		return (s.eContainer().eContents().indexOf(s) + 1) + "";
	}

	protected String version(Chapter c) {
		String parent = getText(c.eContainer());
		if (parent == null)
			return (c.eContainer().eContents().indexOf(c) + 1) + "";
		else
			return version.invoke(c.eContainer())
					+ "."
					+ (((Document) c.eContainer()).getChapters().indexOf(c) + 1);
	}

	protected String version(Section s) {
		return version.invoke(s.eContainer()) + "."
				+ (((Chapter) s.eContainer()).getSubSections().indexOf(s) + 1);
	}

	protected String version(Section2 s) {
		return version.invoke(s.eContainer()) + "."
				+ (((Section) s.eContainer()).getSubSections().indexOf(s) + 1);
	}

	protected String version(Section3 s) {
		return version.invoke(s.eContainer()) + "."
				+ (((Section2) s.eContainer()).getSubSections().indexOf(s) + 1);
	}

	protected String version(Section4 s) {
		return version.invoke(s.eContainer()) + "."
				+ (((Section3) s.eContainer()).getSubSections().indexOf(s) + 1);
	}

	protected String toString(String number, TextOrMarkup title) {
		StringBuilder sb = new StringBuilder(number).append(" - ");
		for (EObject text : title.getContents()) {
			if (text instanceof TextPart)
				sb.append(((TextPart) text).getText());
		}
		return sb.toString();
	}

}
